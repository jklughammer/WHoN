commands[,sbatch_command:=paste0("sbatch --export=NONE --get-user-env=L --job-name=merge_",cellType," --ntasks=1 --cpus-per-task=1 --mem-per-cpu=9000 --partition=shortq --time=08:00:00 -o ",logdir,"/",cellType,"_%j.log ",outDir,"/",cellType,".sh"),]
commands[,java_command:=paste0("#!/bin/sh\n#java -jar /cm/shared/apps/picard-tools/1.118/MergeSamFiles.jar INPUT=",paths," OUTPUT=",bamdir,"/",cellType,".sorted.bam"," ASSUME_SORTED=TRUE","\n#samtools index ",bamdir,"/",cellType,".sorted.bam" ,"\nbam2wig.py -i ",bamdir,"/",cellType,".sorted.bam"," -s ","/fhgfs/groups/lab_bock/shared/resources/genomes/",genome, "/" , genome, ".chromSizes"," -o ",bamdir,"/",cellType,sub_sample,".sorted"," -t ",wigsum),]
for (type in commands$cellType){
print(type)
write.table(commands[cellType==type]$java_command,paste0(outDir,"/",type,".sh"),quote=FALSE,sep="\t",col.names=FALSE,row.names=FALSE)
}
write.table(commands$sbatch_command,paste0(outDir,"/merge.sh"),quote=FALSE,sep="\t",col.names=FALSE,row.names=FALSE)
sub_sample
sub_sample="Artemether"
sampleAnnotation=sampleAnnotation[treatment==sub_sample]
sampleAnnotation
sampleAnnotation=fread("/data/groups/lab_bock/jklughammer/projects/humanIslet/results_analysis/biplot_reduce_Artemether+/cellTypes_annot.txt")
sampleAnnotation
sampleAnnotation=sampleAnnotation[treatment==sub_sample]
sampleAnnotation
sub_sample="Artemether"
if (sub_sample!=""){
sampleAnnotation=sampleAnnotation[treatment==sub_sample]
sub_sample=paste0("_",sub_sample)}
sampleAnnotation[,bamPath:=paste0(wd,"/",sample_name,"/tophat_",genome,"/",sample_name,".aln_sorted.bam"),]
commands=sampleAnnotation[,list(paths=paste(bamPath,collapse=" INPUT=")),by="cellType"]
commands[,sbatch_command:=paste0("sbatch --export=NONE --get-user-env=L --job-name=merge_",cellType," --ntasks=1 --cpus-per-task=1 --mem-per-cpu=9000 --partition=shortq --time=08:00:00 -o ",logdir,"/",cellType,"_%j.log ",outDir,"/",cellType,".sh"),]
commands[,java_command:=paste0("#!/bin/sh\n#java -jar /cm/shared/apps/picard-tools/1.118/MergeSamFiles.jar INPUT=",paths," OUTPUT=",bamdir,"/",cellType,".sorted.bam"," ASSUME_SORTED=TRUE","\n#samtools index ",bamdir,"/",cellType,".sorted.bam" ,"\nbam2wig.py -i ",bamdir,"/",cellType,".sorted.bam"," -s ","/fhgfs/groups/lab_bock/shared/resources/genomes/",genome, "/" , genome, ".chromSizes"," -o ",bamdir,"/",cellType,sub_sample,".sorted"," -t ",wigsum),]
for (type in commands$cellType){
print(type)
write.table(commands[cellType==type]$java_command,paste0(outDir,"/",type,".sh"),quote=FALSE,sep="\t",col.names=FALSE,row.names=FALSE)
}
write.table(commands$sbatch_command,paste0(outDir,"/merge.sh"),quote=FALSE,sep="\t",col.names=FALSE,row.names=FALSE)
sub_sample="Artemether"
if (sub_sample!=""){
sampleAnnotation=sampleAnnotation[treatment==sub_sample]
sub_sample=paste0("_",sub_sample)}
sampleAnnotation[,bamPath:=paste0(wd,"/",sample_name,"/tophat_",genome,"/",sample_name,".aln_sorted.bam"),]
commands=sampleAnnotation[,list(paths=paste(bamPath,collapse=" INPUT=")),by="cellType"]
commands[,sbatch_command:=paste0("sbatch --export=NONE --get-user-env=L --job-name=merge_",cellType," --ntasks=1 --cpus-per-task=1 --mem-per-cpu=9000 --partition=shortq --time=08:00:00 -o ",logdir,"/",cellType,"_%j.log ",outDir,"/",cellType,".sh"),]
commands[,java_command:=paste0("#!/bin/sh\njava -jar /cm/shared/apps/picard-tools/1.118/MergeSamFiles.jar INPUT=",paths," OUTPUT=",bamdir,"/",cellType,".sorted.bam"," ASSUME_SORTED=TRUE","\nsamtools index ",bamdir,"/",cellType,".sorted.bam" ,"\nbam2wig.py -i ",bamdir,"/",cellType,".sorted.bam"," -s ","/fhgfs/groups/lab_bock/shared/resources/genomes/",genome, "/" , genome, ".chromSizes"," -o ",bamdir,"/",cellType,sub_sample,".sorted"," -t ",wigsum),]
for (type in commands$cellType){
print(type)
write.table(commands[cellType==type]$java_command,paste0(outDir,"/",type,".sh"),quote=FALSE,sep="\t",col.names=FALSE,row.names=FALSE)
}
write.table(commands$sbatch_command,paste0(outDir,"/merge.sh"),quote=FALSE,sep="\t",col.names=FALSE,row.names=FALSE)
sub_sample="Artemether"
if (sub_sample!=""){
sampleAnnotation=sampleAnnotation[treatment==sub_sample]
sub_sample=paste0("_",sub_sample)}
sampleAnnotation[,bamPath:=paste0(wd,"/",sample_name,"/tophat_",genome,"/",sample_name,".aln_sorted.bam"),]
commands=sampleAnnotation[,list(paths=paste(bamPath,collapse=" INPUT=")),by="cellType"]
commands[,sbatch_command:=paste0("sbatch --export=NONE --get-user-env=L --job-name=merge_",cellType," --ntasks=1 --cpus-per-task=1 --mem-per-cpu=9000 --partition=shortq --time=08:00:00 -o ",logdir,"/",cellType,"_%j.log ",outDir,"/",cellType,".sh"),]
commands[,java_command:=paste0("#!/bin/sh\n#java -jar /cm/shared/apps/picard-tools/1.118/MergeSamFiles.jar INPUT=",paths," OUTPUT=",bamdir,"/",cellType,".sorted.bam"," ASSUME_SORTED=TRUE","\n#samtools index ",bamdir,"/",cellType,".sorted.bam" ,"\nbam2wig.py -i ",bamdir,"/",cellType,".sorted.bam"," -s ","/data/groups/lab_bock/shared/resources/genomes/",genome, "/" , genome, ".chromSizes"," -o ",bamdir,"/",cellType,sub_sample,".sorted"," -t ",wigsum),]
for (type in commands$cellType){
print(type)
write.table(commands[cellType==type]$java_command,paste0(outDir,"/",type,".sh"),quote=FALSE,sep="\t",col.names=FALSE,row.names=FALSE)
}
write.table(commands$sbatch_command,paste0(outDir,"/merge.sh"),quote=FALSE,sep="\t",col.names=FALSE,row.names=FALSE)
library(data.table)
library(CopywriteR)
source("http://bioconductor.org/biocLite.R")
biocLite("CopywriteR")
source("http://bioconductor.org/biocLite.R")
biocLite("RnBeads")
library(RnBeads)
?RnBeads
?rnb.run.differential
rnb.run.differential
rnb.execute.computeDiffMeth
computeDiffMeth.bin.site
limmaP
rnb.execute.computeDiffMeth
new
p.adjust
?p.adjust
libsary("HTMLtable")
library("HTMLtable")
library("tableHTML")
install.packages("tableHTML")
library("tableHTML")
500/45
45/500
install.packages("randomForest")
library("randomForest")
library(data.table)
library(ggplot2)
library(reshape2)
theme_set(theme_bw())
wd="/scratch/lab_bock/shared/projects/dropSeq/first_data_test/"
test_dt=data.table(A=c(1,0,0,0,0,0,1),B=A=c(0,1,1,1,1,1,0))
test_dt=data.table(A=c(1,0,0,0,0,0,1),B=c(0,1,1,1,1,1,0))
ggplot(test_dt,aes(x=log10(A),y=log10(B)))+geom_point()
test_dt=data.table(A=c(10,0,0,0,0,0,10),B=c(0,10,10,10,10,10,0))
ggplot(test_dt,aes(x=log10(A),y=log10(B)))+geom_point()
test_dt=data.table(A=c(10,0,0,0,0,0,10),B=c(0,42,33,50,14,11,0))
ggplot(test_dt,aes(x=log10(A),y=log10(B)))+geom_point()
test_dt=data.table(A=c(53,0,0,0,0,0,50),B=c(0,42,33,50,14,11,0))
test_dt=data.table(A=c(53,0,0,0,0,0,50),B=c(0,42,33,50,14,11,0))
ggplot(test_dt,aes(x=log10(A),y=log10(B)))+geom_point()
ggplot(test_dt,aes(x=log10(A+0.001),y=log10(B+0.001)))+geom_point()
ggplot(test_dt,aes(x=log10(A),y=log10(B)))+geom_point()
test_dt
library(data.table)
library(ggplot2)
library(reshape2)
theme_set(theme_bw())
data_dir="/scratch/lab_bock/shared/projects/crop-seq/results_pipeline/Drop-seq_HEK293T-3T3/"
refFlat=fread("/data/groups/lab_bock/shared/resources/genomes/hg19_mm10_transgenes/hg19_mm10_transgenes.refFlat",drop=c(7:11))
refFlat=fread(refFlat,drop=c(7:11))
setnames(refFlat,names(refFlat),c("GENE","transcript","chrom","strand","start","end"))
umiPerGene=fread(file.path(data_dir,"cell_umi_barcodes.500genes.tsv"))
readsCount=fread(file.path(data_dir,"digital_expression.summary.500genes.tsv"))
setnames(readsCount,names(readsCount),c("count","cell_barcode"))
dge=fread(file.path(data_dir,"digital_expression.500genes.tsv"))
refFlat=fread("/data/groups/lab_bock/shared/resources/genomes/hg19_mm10_transgenes/hg19_mm10_transgenes.refFlat",drop=c(7:11))
setnames(refFlat,names(refFlat),c("GENE","transcript","chrom","strand","start","end"))
readsCount=fread(file.path(data_dir,"digital_expression.summary.500genes.tsv"))
readsCount
dge=fread(file.path(data_dir,"digital_expression.500genes.tsv"))
duplUMIs=umiPerGene[Num_Obs>1,.N,by="Cell Barcode"]
duplScore=nrow(umiPerGene[Num_Obs>1])/nrow(umiPerGene)
ggplot(duplUMIs,aes(x=N))+geom_histogram()+xlab("Number of duplicate UMIs")+ylab("Number of cells")+ggtitle(paste0("Duplication rate: ",round(duplScore,3)))
dge=merge(refFlat,dge,by="GENE")
dge_long=melt(dge,id.vars=c("GENE","transcript","chrom","strand","start","end"),value.name="count",variable.name="cell_barcode")
dge_long[,species:=sub("_.*","",chrom),]
dge_long_uniq=unique(dge_long[,-grep("transcript|chrom|strand|start|end",names(dge_long)),with=FALSE]) #this was wrong before (only removed transcripts --> therefore genes kept duplicated)
dge_long_mean=dge_long_uniq[,list(g1=sum(count>=1),g5=sum(count>=5),g10=sum(count>=10),mean=mean(count[count>0])),by=c("cell_barcode","species")]
dge_long_mean[,diff_mh_g1:=g1[species=="MOUSE"]-g1[species=="HUMAN"],by="cell_barcode"]
dge_long_mean[,ratio_mh_g1:=g1[species=="MOUSE"]/g1[species=="HUMAN"],by="cell_barcode"]
dge_long_mean[,percent_g1:=g1/sum(g1)*100,by="cell_barcode"]
dge_long_mean[,total_g1:=sum(g1),by="cell_barcode"]
dge_long_mean[,species_dom:=ifelse(diff_mh_g1>0,"MOUSE",ifelse(diff_mh_g1<0,"HUMAN","tie")),]
dge_wide_mean=reshape(dge_long_mean,idvar="cell_barcode",timevar="species",direction="wide")
double_frac=(nrow(dge_wide_mean[ratio_mh_g1.MOUSE>0.1&ratio_mh_g1.MOUSE<0.9])*2)/nrow(dge_wide_mean)
dge_long_mean[,cell_barcode:=factor(cell_barcode,levels=unique(cell_barcode[order(ratio_mh_g1)])),]
ggplot(dge_long_mean[percent_g1!=0], aes(x=cell_barcode,y=percent_g1,fill=species,alpha=log10(total_g1)))+geom_bar(position="stack",stat="identity",col="black")+ggtitle(paste0("doublet-estimate: ",round(double_frac,3)*100,"%"))+coord_flip()
refFlat
refFlat[crom=="ERCC"]
refFlat[chrom=="ERCC"]
refFlat[grepl("ERCC",chrom)]
refFlat=refFlat[!grepl("ERCC",chrom),]
dge=merge(refFlat,dge,by="GENE")
dge_long=melt(dge,id.vars=c("GENE","transcript","chrom","strand","start","end"),value.name="count",variable.name="cell_barcode")
dge_long[,species:=sub("_.*","",chrom),]
dge=fread(file.path(data_dir,"digital_expression.500genes.tsv"))
dge=merge(refFlat,dge,by="GENE")
dge_long=melt(dge,id.vars=c("GENE","transcript","chrom","strand","start","end"),value.name="count",variable.name="cell_barcode")
dge_long[,species:=sub("_.*","",chrom),]
dge_long_uniq=unique(dge_long[,-grep("transcript|chrom|strand|start|end",names(dge_long)),with=FALSE]) #this was wrong before (only removed transcripts --> therefore genes kept duplicated)
dge_long_mean=dge_long_uniq[,list(g1=sum(count>=1),g5=sum(count>=5),g10=sum(count>=10),mean=mean(count[count>0])),by=c("cell_barcode","species")]
dge_long_mean[,diff_mh_g1:=g1[species=="MOUSE"]-g1[species=="HUMAN"],by="cell_barcode"]
dge_long_mean[,ratio_mh_g1:=g1[species=="MOUSE"]/g1[species=="HUMAN"],by="cell_barcode"]
dge_long_mean[,percent_g1:=g1/sum(g1)*100,by="cell_barcode"]
dge_long_mean[,total_g1:=sum(g1),by="cell_barcode"]
dge_long_mean[,species_dom:=ifelse(diff_mh_g1>0,"MOUSE",ifelse(diff_mh_g1<0,"HUMAN","tie")),]
dge_wide_mean=reshape(dge_long_mean,idvar="cell_barcode",timevar="species",direction="wide")
double_frac=(nrow(dge_wide_mean[ratio_mh_g1.MOUSE>0.1&ratio_mh_g1.MOUSE<0.9])*2)/nrow(dge_wide_mean)
dge_long_mean[,cell_barcode:=factor(cell_barcode,levels=unique(cell_barcode[order(ratio_mh_g1)])),]
ggplot(dge_long_mean[percent_g1!=0], aes(x=cell_barcode,y=percent_g1,fill=species,alpha=log10(total_g1)))+geom_bar(position="stack",stat="identity",col="black")+ggtitle(paste0("doublet-estimate: ",round(double_frac,3)*100,"%"))+coord_flip()
out_dir="/scratch/lab_bock/shared/projects/crop-seq/mixing_hum_mouse"
dir.create(out_dir)
svg(paste0(out_dir,"/species_ratio_g1.svg"),height=0.1*length(unique(dge_long_mean$cell_barcode)),width=8)
ggplot(dge_long_mean[percent_g1!=0], aes(x=cell_barcode,y=percent_g1,fill=species,alpha=log10(total_g1)))+geom_bar(position="stack",stat="identity",col="black")+ggtitle(paste0("doublet-estimate: ",round(double_frac,3)*100,"%"))+coord_flip()
dev.off()
out_dir="/scratch/lab_bock/shared/projects/crop-seq/results/mixing_hum_mouse"
dir.create(out_dir)
out_dir="/scratch/lab_bock/shared/projects/crop-seq/mixing_hum_mouse"
dir.create(out_dir)
ggplot(dge_long_mean[percent_g1!=0], aes(x=cell_barcode,y=percent_g1,fill=species,alpha=log10(total_g1)))+geom_bar(position="stack",stat="identity",col="transparent")+ggtitle(paste0("doublet-estimate: ",round(double_frac,3)*100,"%"))+theme(axis.text = NULL)+coord_flip()
ggplot(dge_long_mean[percent_g1!=0], aes(x=cell_barcode,y=percent_g1,fill=species,alpha=log10(total_g1)))+geom_bar(position="stack",stat="identity",col="transparent")+ggtitle(paste0("doublet-estimate: ",round(double_frac,3)*100,"%"))+theme(axis.text = "")+coord_flip()
?theme
ggplot(dge_long_mean[percent_g1!=0], aes(x=cell_barcode,y=percent_g1,fill=species,alpha=log10(total_g1)))+geom_bar(position="stack",stat="identity",col="transparent")+ggtitle(paste0("doublet-estimate: ",round(double_frac,3)*100,"%"))+theme(axis.text.x = element_blank())+coord_flip()
ggplot(dge_long_mean[percent_g1!=0], aes(x=cell_barcode,y=percent_g1,fill=species,alpha=log10(total_g1)))+geom_bar(position="stack",stat="identity",col="transparent")+ggtitle(paste0("doublet-estimate: ",round(double_frac,3)*100,"%"))+theme(axis.text.y = element_blank())+coord_flip()
theme_set(theme_minimal())
ggplot(dge_long_mean[percent_g1!=0], aes(x=cell_barcode,y=percent_g1,fill=species,alpha=log10(total_g1)))+geom_bar(position="stack",stat="identity",col="transparent")+ggtitle(paste0("doublet-estimate: ",round(double_frac,3)*100,"%"))+theme(axis.text.y = element_blank())+coord_flip()
theme_set(theme_bw())
ggplot(dge_long_mean[percent_g1!=0], aes(x=cell_barcode,y=percent_g1,fill=species,alpha=log10(total_g1)))+geom_bar(position="stack",stat="identity",col="transparent")+ggtitle(paste0("doublet-estimate: ",round(double_frac,3)*100,"%"))+theme(axis.text.y = element_blank())+coord_flip()
svg(paste0(out_dir,"/species_ratio_g1.svg"),height=9,width=8)
ggplot(dge_long_mean[percent_g1!=0], aes(x=cell_barcode,y=percent_g1,fill=species,alpha=log10(total_g1)))+geom_bar(position="stack",stat="identity",col="transparent")+ggtitle(paste0("doublet-estimate: ",round(double_frac,3)*100,"%"))+theme(axis.text.y = element_blank())+coord_flip()+ylab("Cells")+xlab("% of total detected genes")
dev.off()
ggplot(dge_long_mean[percent_g1!=0], aes(x=cell_barcode,y=percent_g1,fill=species,alpha=log10(total_g1)))+geom_bar(position="stack",stat="identity",col="transparent")+ggtitle(paste0("doublet-estimate: ",round(double_frac,3)*100,"%"))+theme(axis.text.y = element_blank(),panel.grid.major = element_blank(), panel.grid.minor = element_blank())+coord_flip()+ylab("Cells")+xlab("% of total detected genes")
svg(paste0(out_dir,"/species_ratio_g1.svg"),height=9,width=8)
ggplot(dge_long_mean[percent_g1!=0], aes(x=cell_barcode,y=percent_g1,fill=species,alpha=log10(total_g1)))+geom_bar(position="stack",stat="identity",col="transparent")+ggtitle(paste0("doublet-estimate: ",round(double_frac,3)*100,"%"))+theme(axis.text.y = element_blank(),panel.grid.major = element_blank(), panel.grid.minor = element_blank())+coord_flip()+ylab("Cells")+xlab("% of total detected genes")
dev.off()
ggplot(dge_long_mean[percent_g1!=0], aes(x=cell_barcode,y=percent_g1,fill=species,alpha=log10(total_g1)))+geom_bar(position="stack",stat="identity",col="transparent")+ggtitle(paste0("doublet-estimate: ",round(double_frac,3)*100,"%"))+theme(axis.text.y = element_blank(),panel.grid.major = element_blank(), panel.grid.minor = element_blank())+coord_flip()+xlab("Cells")+ylab("% of total detected genes")
svg(paste0(out_dir,"/species_ratio_g1.svg"),height=7,width=7)
ggplot(dge_long_mean[percent_g1!=0], aes(x=cell_barcode,y=percent_g1,fill=species,alpha=log10(total_g1)))+geom_bar(position="stack",stat="identity",col="transparent")+ggtitle(paste0("doublet-estimate: ",round(double_frac,3)*100,"%"))+theme(axis.text.y = element_blank(),panel.grid.major = element_blank(), panel.grid.minor = element_blank())+coord_flip()+xlab("Cells")+ylab("% of total detected genes")
dev.off()
svg(paste0(out_dir,"/species_ratio_g1.svg"),height=7,width=5)
ggplot(dge_long_mean[percent_g1!=0], aes(x=cell_barcode,y=percent_g1,fill=species,alpha=log10(total_g1)))+geom_bar(position="stack",stat="identity",col="transparent")+ggtitle(paste0("doublet-estimate: ",round(double_frac,3)*100,"%"))+theme(axis.text.y = element_blank(),panel.grid.major = element_blank(), panel.grid.minor = element_blank())+coord_flip()+xlab("Cells")+ylab("% of total detected genes")
dev.off()
#mouse vs. human
ggplot(dge_wide_mean, aes(x=log10(g1.MOUSE+1),y=log10(g1.HUMAN+1),col=species_dom.MOUSE))+geom_abline(slope=1)+geom_point()+theme(legend.position="bottom")+ggtitle(paste0("doublet-estimate: ",round(double_frac,3)*100,"%"))
ggplot(dge_wide_mean, aes(x=log10(g1.MOUSE),y=log10(g1.HUMAN),col=species_dom.MOUSE))+geom_abline(slope=1)+geom_point()+theme(legend.position="bottom")+ggtitle(paste0("doublet-estimate: ",round(double_frac,3)*100,"%"))
ggplot(dge_wide_mean, aes(x=log10(g1.MOUSE),y=log10(g1.HUMAN),col=species_dom.MOUSE))+geom_abline(slope=1)+geom_point()+theme(legend.position="bottom")+ggtitle(paste0("doublet-estimate: ",round(double_frac,3)*100,"%"))+xlim(c(0,4))++xlim(c(0,4))
ggplot(dge_wide_mean, aes(x=log10(g1.MOUSE),y=log10(g1.HUMAN),col=species_dom.MOUSE))+geom_abline(slope=1)+geom_point()+theme(legend.position="bottom")+ggtitle(paste0("doublet-estimate: ",round(double_frac,3)*100,"%"))+xlim(c(0,4))+xlim(c(0,4))
ggplot(dge_wide_mean, aes(x=log10(g1.MOUSE),y=log10(g1.HUMAN),col=species_dom.MOUSE))+geom_abline(slope=1)+geom_point()+theme(legend.position="bottom")+ggtitle(paste0("doublet-estimate: ",round(double_frac,3)*100,"%"))+xlim(c(0,4))+ylim(c(0,4))
ggplot(dge_wide_mean, aes(x=g1.MOUSE,y=g1.HUMAN,col=species_dom.MOUSE))+geom_abline(slope=1)+geom_point()+theme(legend.position="bottom")+ggtitle(paste0("doublet-estimate: ",round(double_frac,3)*100,"%"))+xlim(c(0,4))+ylim(c(0,4))
ggplot(dge_wide_mean, aes(x=g1.MOUSE,y=g1.HUMAN,col=species_dom.MOUSE))+geom_abline(slope=1)+geom_point()+theme(legend.position="bottom")+ggtitle(paste0("doublet-estimate: ",round(double_frac,3)*100,"%"))
ggplot(dge_wide_mean, aes(x=log10(g1.MOUSE),y=log10(g1.HUMAN),col=species_dom.MOUSE))+geom_abline(slope=1)+geom_point()+theme(legend.position="bottom")+ggtitle(paste0("doublet-estimate: ",round(double_frac,3)*100,"%"))+xlim(c(0,4))+ylim(c(0,4))
dge_wide_mean[,doublet:=ifelse(ratio_mh_g1.MOUSE>0.1&ratio_mh_g1.MOUSE<0.9,TRUE,FALSE),]
ggplot(dge_wide_mean, aes(x=log10(g1.MOUSE),y=log10(g1.HUMAN),fill=species_dom.MOUSE,col=doublet))+geom_abline(slope=1)+geom_point(shape=21,alpha=0.6)+theme(legend.position="bottom")+ggtitle(paste0("doublet-estimate: ",round(double_frac,3)*100,"%"))+xlim(c(0,4))+ylim(c(0,4))
ggplot(dge_wide_mean, aes(x=log10(g1.MOUSE),y=log10(g1.HUMAN),fill=species_dom.MOUSE,col=doublet))+geom_abline(slope=1)+geom_point(shape=21,alpha=0.6)+theme(legend.position="bottom")+ggtitle(paste0("doublet-estimate: ",round(double_frac,3)*100,"%"))+xlim(c(0,4))+ylim(c(0,4))+scale_color_manual(values=c("TRUE"="black","FALSE"="grey"))
double_frac=(nrow(dge_wide_mean[(ratio_mh_g1.MOUSE>0.1&ratio_mh_g1.MOUSE<0.9)|(ratio_mh_g1.HUMAN>0.1&ratio_mh_g1.HUMAN<0.9)])*2)/nrow(dge_wide_mean)
double_frac
dge_wide_mean
dge_wide_mean[ratio_mh_g1.MOUSE>0.1&ratio_mh_g1.MOUSE<0.9]
dge_wide_mean[ratio_mh_g1.MOUSE<0.9]
hist(dge_wide_mean[ratio_mh_g1.MOUSE<0.9]$ratio_mh_g1.MOUSE))
hist(dge_wide_mean[ratio_mh_g1.MOUSE<0.9]$ratio_mh_g1.MOUSE)
dge_wide_mean
dge_wide_mean[,doublet:=ifelse(percent_g1.MOUSE>10&percent_g1.MOUSE<90,TRUE,FALSE),]
double_frac=(nrow(dge_wide_mean[percent_g1.MOUSE>10&percent_g1.MOUSE<90])*2)/nrow(dge_wide_mean)
ggplot(dge_long_mean[percent_g1!=0], aes(x=cell_barcode,y=percent_g1,fill=species,alpha=log10(total_g1)))+geom_bar(position="stack",stat="identity",col="transparent")+ggtitle(paste0("doublet-estimate: ",round(double_frac,3)*100,"%"))+theme(axis.text.y = element_blank(),panel.grid.major = element_blank(), panel.grid.minor = element_blank())+coord_flip()+xlab("Cells")+ylab("% of total detected genes")
ggplot(dge_wide_mean, aes(x=log10(g1.MOUSE),y=log10(g1.HUMAN),fill=species_dom.MOUSE,col=doublet))+geom_abline(slope=1)+geom_point(shape=21,alpha=0.6)+theme(legend.position="bottom")+ggtitle(paste0("doublet-estimate: ",round(double_frac,3)*100,"%"))+xlim(c(0,4))+ylim(c(0,4))+scale_color_manual(values=c("TRUE"="black","FALSE"="grey"))
svg(paste0(out_dir,"/species_cor_g1.svg"),height=6,width=5)
ggplot(dge_wide_mean, aes(x=log10(g1.MOUSE),y=log10(g1.HUMAN),fill=species_dom.MOUSE,col=doublet))+geom_abline(slope=1)+geom_point(shape=21,alpha=0.6)+theme(legend.position="bottom")+ggtitle(paste0("doublet-estimate: ",round(double_frac,3)*100,"%"))+xlim(c(0,4))+ylim(c(0,4))+scale_color_manual(values=c("TRUE"="black","FALSE"="grey"))
dev.off()
ggplot(dge_wide_mean, aes(x=log10(g1.MOUSE),y=log10(g1.HUMAN),fill=species_dom.MOUSE,col=doublet))+geom_abline(slope=1)+geom_point(shape=21,alpha=0.6,size=2)+theme(legend.position="bottom")+ggtitle(paste0("doublet-estimate: ",round(double_frac,3)*100,"%"))+xlim(c(0,4))+ylim(c(0,4))+scale_color_manual(values=c("TRUE"="black","FALSE"="grey"))
svg(paste0(out_dir,"/species_cor_g1.svg"),height=6,width=5)
ggplot(dge_wide_mean, aes(x=log10(g1.MOUSE),y=log10(g1.HUMAN),fill=species_dom.MOUSE,col=doublet))+geom_abline(slope=1)+geom_point(shape=21,alpha=0.6,size=2)+theme(legend.position="bottom")+ggtitle(paste0("doublet-estimate: ",round(double_frac,3)*100,"%"))+xlim(c(0,4))+ylim(c(0,4))+scale_color_manual(values=c("TRUE"="black","FALSE"="grey"))
dev.off()
duplUMIs=umiPerGene[Num_Obs>1,.N,by="Cell Barcode"]
duplScore=nrow(umiPerGene[Num_Obs>1])/nrow(umiPerGene)
ggplot(duplUMIs,aes(x=N))+geom_histogram()+xlab("Number of duplicate UMIs")+ylab("Number of cells")+ggtitle(paste0("Duplication rate: ",round(duplScore,3)))
duplUMIs
duplUMIs[,N_topped:=ifelse(N>3000,3000,N),]
ggplot(duplUMIs,aes(x=N_topped))+geom_histogram()+xlab("Number of duplicate UMIs")+ylab("Number of cells")+ggtitle(paste0("Duplication rate: ",round(duplScore,3)))
duplUMIs[,N_topped:=ifelse(N>1000,1000,N),]
ggplot(duplUMIs,aes(x=N_topped))+geom_histogram()+xlab("Number of duplicate UMIs")+ylab("Number of cells")+ggtitle(paste0("Duplication rate: ",round(duplScore,3)))
ggplot(duplUMIs,aes(x=N_topped))+geom_density()+xlab("Number of duplicate UMIs")+ylab("Number of cells")+ggtitle(paste0("Duplication rate: ",round(duplScore,3)))
ggplot(duplUMIs,aes(x=N_topped))+geom_histogram()+xlab("Number of duplicate UMIs")+ylab("Number of cells")+ggtitle(paste0("Duplication rate: ",round(duplScore,3)))
ggplot(duplUMIs,aes(x=N_topped))+geom_histogram(bins=50)+xlab("Number of duplicate UMIs")+ylab("Number of cells")+ggtitle(paste0("Duplication rate: ",round(duplScore,3)))
ggplot(duplUMIs,aes(x=N_topped))+geom_histogram(bins=100)+xlab("Number of duplicate UMIs")+ylab("Number of cells")+ggtitle(paste0("Duplication rate: ",round(duplScore,3)))
ggplot(duplUMIs,aes(x=N_topped))+geom_histogram(bins=20)+xlab("Number of duplicate UMIs")+ylab("Number of cells")+ggtitle(paste0("Duplication rate: ",round(duplScore,3)))
umiPerGene
duplUMIs
ggplot(duplUMIs,aes(x=log10(N_topped)))+geom_histogram(bins=20)+xlab("Number of duplicate UMIs")+ylab("Number of cells")+ggtitle(paste0("Duplication rate: ",round(duplScore,3)))
ggplot(duplUMIs,aes(x=log10(N)))+geom_histogram(bins=20)+xlab("Number of duplicate UMIs")+ylab("Number of cells")+ggtitle(paste0("Duplication rate: ",round(duplScore,3)))
ggplot(duplUMIs,aes(x=log10(N)))+geom_histogram(bins=30)+xlab("Number of duplicate UMIs")+ylab("Number of cells")+ggtitle(paste0("Duplication rate: ",round(duplScore,3)))
ggplot(duplUMIs,aes(x=log10(N)))+geom_histogram(bins=50)+xlab("Number of duplicate UMIs")+ylab("Number of cells")+ggtitle(paste0("Duplication rate: ",round(duplScore,3)))
ggplot(duplUMIs,aes(x=log10(N)))+geom_density()+xlab("Number of duplicate UMIs")+ylab("Number of cells")+ggtitle(paste0("Duplication rate: ",round(duplScore,3)))
ggplot(duplUMIs,aes(x=log10(N)))+geom_hist(bins=50)+xlab("Number of duplicate UMIs")+ylab("Number of cells")+ggtitle(paste0("Duplication rate: ",round(duplScore,3)))
ggplot(duplUMIs,aes(x=log10(N)))+geom_histogram(bins=50)+xlab("Number of duplicate UMIs")+ylab("Number of cells")+ggtitle(paste0("Duplication rate: ",round(duplScore,3)))
ggplot(duplUMIs,aes(x=log10(N)))+geom_histogram(bins=50)+xlab("Number of duplicate UMIs")+ylab("Number of cells")+ggtitle(paste0("Duplication rate: ",round(duplScore,3)))+xlim(c(0,5))
ggplot(duplUMIs,aes(x=log10(N)))+geom_histogram(bins=60)+xlab("Number of duplicate UMIs")+ylab("Number of cells")+ggtitle(paste0("Duplication rate: ",round(duplScore,3)))+xlim(c(0,5))
ggplot(duplUMIs,aes(x=log10(N)))+geom_histogram(bins=60,col=black,fill="black"malpha=0.4)+xlab("Number of duplicate UMIs")+ylab("Number of cells")+ggtitle(paste0("Duplication rate: ",round(duplScore,3)))
ggplot(duplUMIs,aes(x=log10(N)))+geom_histogram(bins=60,col=black,fill="black",alpha=0.4)+xlab("Number of duplicate UMIs")+ylab("Number of cells")+ggtitle(paste0("Duplication rate: ",round(duplScore,3)))
ggplot(duplUMIs,aes(x=log10(N)))+geom_histogram(bins=60,col="black",fill="black",alpha=0.4)+xlab("Number of duplicate UMIs")+ylab("Number of cells")+ggtitle(paste0("Duplication rate: ",round(duplScore,3)))
ggplot(duplUMIs,aes(x=log10(N)))+geom_histogram(bins=50,col="black",fill="black",alpha=0.4)+xlab("Number of duplicate UMIs")+ylab("Number of cells")+ggtitle(paste0("Duplication rate: ",round(duplScore,3)))
ggplot(duplUMIs,aes(x=log10(N)))+geom_histogram(bins=40,col="black",fill="black",alpha=0.4)+xlab("Number of duplicate UMIs")+ylab("Number of cells")+ggtitle(paste0("Duplication rate: ",round(duplScore,3)))
ggplot(duplUMIs,aes(x=log10(N)))+geom_histogram(bins=30,col="black",fill="black",alpha=0.4)+xlab("Number of duplicate UMIs")+ylab("Number of cells")+ggtitle(paste0("Duplication rate: ",round(duplScore,3)))
ggplot(duplUMIs,aes(x=log10(N)))+geom_histogram(bins=40,col="black",fill="black",alpha=0.4)+xlab("Number of duplicate UMIs")+ylab("Number of cells")+ggtitle(paste0("Duplication rate: ",round(duplScore,3)))
ggplot(duplUMIs,aes(x=log10(N)))+geom_histogram(bins=40,col="black",fill="black",alpha=0.4,size=0.5)+xlab("Number of duplicate UMIs")+ylab("Number of cells")+ggtitle(paste0("Duplication rate: ",round(duplScore,3)))
ggplot(duplUMIs,aes(x=log10(N)))+geom_histogram(bins=40,col="black",fill="black",alpha=0.4,size=0.1)+xlab("Number of duplicate UMIs")+ylab("Number of cells")+ggtitle(paste0("Duplication rate: ",round(duplScore,3)))
ggplot(duplUMIs,aes(x=log10(N)))+geom_histogram(bins=40,col="black",fill="black",alpha=0.4,size=0.2)+xlab("Number of duplicate UMIs")+ylab("Number of cells")+ggtitle(paste0("Duplication rate: ",round(duplScore,3)))
ggplot(duplUMIs,aes(x=log10(N)))+geom_histogram(bins=40,col="black",fill="grey",alpha=0.4,size=0.2)+xlab("Number of duplicate UMIs")+ylab("Number of cells")+ggtitle(paste0("Duplication rate: ",round(duplScore,3)))
ggplot(duplUMIs,aes(x=log10(N)))+geom_histogram(bins=40,col="black",fill="grey",size=0.2)+xlab("Number of duplicate UMIs")+ylab("Number of cells")+ggtitle(paste0("Duplication rate: ",round(duplScore,3)))
ggplot(duplUMIs,aes(x=log10(N)))+geom_histogram(bins=40,col="black",fill="grey",size=0.2)+xlab("Number of duplicate UMIs (log10)")+ylab("Number of cells")+ggtitle(paste0("Duplication rate: ",round(duplScore,3)))
ggplot(duplUMIs,aes(x=log10(N)))+geom_histogram(bins=40,col="black",fill="grey",size=0.2)+xlab("Number of duplicate UMIs (log10)")+ylab("Number of cells")+ggtitle(paste0("Duplication rate: ",round(duplScore,3)))+xlim(c(2,4.3))
ggplot(duplUMIs,aes(x=log10(N)))+geom_histogram(bins=40,col="black",fill="grey",size=0.2)+xlab("Number of duplicate UMIs (log10)")+ylab("Number of cells")+ggtitle(paste0("Duplication rate: ",round(duplScore,3)))+xlim(c(2,4.5))
ggplot(duplUMIs,aes(x=log10(N)))+geom_histogram(bins=40,col="black",fill="grey",size=0.2)+xlab("Number of duplicate UMIs (log10)")+ylab("Number of cells")+ggtitle(paste0("Duplication rate: ",round(duplScore,3)))+xlim(c(1,4.5))
ggplot(duplUMIs,aes(x=log10(N)))+geom_histogram(bins=40,col="black",fill="grey",size=0.2)+xlab("Number of duplicate UMIs (log10)")+ylab("Number of cells")+ggtitle(paste0("Duplication rate: ",round(duplScore,3)))+xlim(c(0,4.5))
ggplot(duplUMIs,aes(x=log10(N)))+geom_histogram(bins=40,col="black",fill="grey",size=0.2)+xlab("Number of duplicate UMIs (log10)")+ylab("Number of cells")+ggtitle(paste0("Duplication rate: ",round(duplScore,3)))
svg(paste0(out_dir,"/duplUMIs_per_cell_hist.svg"),height=6,width=6)
ggplot(duplUMIs,aes(x=log10(N)))+geom_histogram(bins=40,col="black",fill="grey",size=0.2)+xlab("Number of duplicate UMIs (log10)")+ylab("Number of cells")+ggtitle(paste0("Duplication rate: ",round(duplScore,3)))
dev.off()
ggplot(dge_wide_mean, aes(x=log10(g1.MOUSE),y=log10(g1.HUMAN),fill=species_dom.MOUSE,col=doublet))+geom_abline(slope=1)+geom_point(shape=21,alpha=0.4,size=2)+theme(legend.position="bottom")+ggtitle(paste0("doublet-estimate: ",round(double_frac,3)*100,"%"))+xlim(c(0,4))+ylim(c(0,4))+scale_color_manual(values=c("TRUE"="black","FALSE"="grey"))
svg(paste0(out_dir,"/species_cor_g1.svg"),height=6,width=5)
ggplot(dge_wide_mean, aes(x=log10(g1.MOUSE),y=log10(g1.HUMAN),fill=species_dom.MOUSE,col=doublet))+geom_abline(slope=1)+geom_point(shape=21,alpha=0.4,size=2)+theme(legend.position="bottom")+ggtitle(paste0("doublet-estimate: ",round(double_frac,3)*100,"%"))+xlim(c(0,4))+ylim(c(0,4))+scale_color_manual(values=c("TRUE"="black","FALSE"="grey"))
dev.off()
10^2.5
umiPerGene
umiPerGene[,.N,by=c("Num_Obs","Cell Barcode")]
umiPerGene[,.N,by=c("Num_Obs","Cell Barcode")][,sum(N[Num_Obs>1]/sum(N)*100),by="Cell Barcode"]
percent_dup=umiPerGene[,.N,by=c("Num_Obs","Cell Barcode")][,sum(N[Num_Obs>1]/sum(N)*100),by="Cell Barcode"]
ggplot(percent_dup,aes(x=V1)+geom_histogram(bins=40,col="black",fill="grey",size=0.2)+xlab("Number of duplicate UMIs (log10)")+ylab("Number of cells")+ggtitle(paste0("Duplication rate: ",round(duplScore,3)))
ggplot(percent_dup,aes(x=V1)+geom_histogram(bins=40,col="black",fill="grey",size=0.2)+xlab("Number of duplicate UMIs (log10)")+ylab("Number of cells")+ggtitle(paste0("Duplication rate: ",round(duplScore,3)))
ggplot(percent_dup,aes(x=V1)+geom_histogram(bins=40,col="black",fill="grey",size=0.2)+xlab("Number of duplicate UMIs (log10)")+ylab("Number of cells")+ggtitle(paste0("Duplication rate: ",round(duplScore,3)))
ggplot(percent_dup,aes(x=V1)+geom_histogram(bins=40,col="black",fill="grey",size=0.2)
percent_dup=umiPerGene[,.N,by=c("Num_Obs","Cell Barcode")][,sum(N[Num_Obs>1]/sum(N)*100),by="Cell Barcode"]
percent_dup
ggplot(percent_dup,aes(x=V1)+geom_histogram(bins=40,col="black",fill="grey",size=0.2)
ggplot(percent_dup,aes(x=V1))+geom_histogram(bins=40,col="black",fill="grey",size=0.2)+xlab("Number of duplicate UMIs (log10)")+ylab("Number of cells")+ggtitle(paste0("Duplication rate: ",round(duplScore,3)))
ggplot(percent_dup,aes(x=V1))+geom_histogram(bins=40,col="black",fill="grey",size=0.2)+xlab("Number of duplicate UMIs (log10)")+ylab("Number of cells")+ggtitle(paste0("Duplication rate: ",round(duplScore,3)))
ggplot(percent_dup,aes(x=V1))+geom_histogram(bins=40,col="black",fill="grey",size=0.2)+xlab("Percent duplicate UMIs")+ylab("Number of cells")+ggtitle(paste0("Duplication rate: ",round(duplScore,3)))
ggplot(percent_dup,aes(x=V1))+geom_histogram(bins=50,col="black",fill="grey",size=0.2)+xlab("Percent duplicate UMIs")+ylab("Number of cells")+ggtitle(paste0("Duplication rate: ",round(duplScore,3)))
ggplot(percent_dup,aes(x=V1))+geom_histogram(bins=30,col="black",fill="grey",size=0.2)+xlab("Percent duplicate UMIs")+ylab("Number of cells")+ggtitle(paste0("Duplication rate: ",round(duplScore,3)))
ggplot(percent_dup,aes(x=V1))+geom_histogram(bins=50,col="black",fill="grey",size=0.2)+xlab("Percent duplicate UMIs")+ylab("Number of cells")+ggtitle(paste0("Duplication rate: ",round(duplScore,3)))
percent_dup=umiPerGene[,.N,by=c("Num_Obs","Cell Barcode")][,list(percent_dupl=sum(N[Num_Obs>1]/sum(N)*100)),by="Cell Barcode"]
percent_dup
ggplot(percent_dup,aes(x=percent_dupl))+geom_histogram(bins=50,col="black",fill="grey",size=0.2)+xlab("Percent duplicate UMIs")+ylab("Number of cells")+ggtitle(paste0("Duplication rate: ",round(duplScore,3)))
svg(paste0(out_dir,"/duplUMIs_percent_cell_hist.svg"),height=6,width=6)
ggplot(percent_dup,aes(x=percent_dupl))+geom_histogram(bins=50,col="black",fill="grey",size=0.2)+xlab("Percent duplicate UMIs")+ylab("Number of cells")+ggtitle(paste0("Duplication rate: ",round(duplScore,3)))
dev.off()
library(data.table)
library(ggplot2)
library(reshape2)
theme_set(theme_bw())
data_dir="/scratch/lab_bock/shared/projects/crop-seq/results_pipeline/Drop-seq_HEK293T-3T3/"
out_dir="/scratch/lab_bock/shared/projects/crop-seq/mixing_hum_mouse"
dir.create(out_dir)
refFlat=fread("/data/groups/lab_bock/shared/resources/genomes/hg19_mm10_transgenes/hg19_mm10_transgenes.refFlat",drop=c(7:11))
setnames(refFlat,names(refFlat),c("GENE","transcript","chrom","strand","start","end"))
refFlat=refFlat[!grepl("ERCC",chrom),]
umiPerGene=fread(file.path(data_dir,"cell_umi_barcodes.500genes.tsv"))
dge=fread(file.path(data_dir,"digital_expression.500genes.tsv"))
#plot number of duplicate UMIs per cell
duplUMIs=umiPerGene[Num_Obs>1,.N,by="Cell Barcode"]
duplUMIs[,N_topped:=ifelse(N>1000,1000,N),]
duplScore=nrow(umiPerGene[Num_Obs>1])/nrow(umiPerGene)
pdf(paste0(out_dir,"/duplUMIs_per_cell_hist.svg"),height=6,width=6)
ggplot(duplUMIs,aes(x=log10(N)))+geom_histogram(bins=40,col="black",fill="grey",size=0.2)+xlab("Number of duplicate UMIs (log10)")+ylab("Number of cells")+ggtitle(paste0("Duplication rate: ",round(duplScore,3)))
dev.off()
#plot percentage of duplicate UMIs per cell
percent_dup=umiPerGene[,.N,by=c("Num_Obs","Cell Barcode")][,list(percent_dupl=sum(N[Num_Obs>1]/sum(N)*100)),by="Cell Barcode"]
pdf(paste0(out_dir,"/duplUMIs_percent_cell_hist.svg"),height=6,width=6)
ggplot(percent_dup,aes(x=percent_dupl))+geom_histogram(bins=50,col="black",fill="grey",size=0.2)+xlab("Percent duplicate UMIs")+ylab("Number of cells")+ggtitle(paste0("Duplication rate: ",round(duplScore,3)))
dev.off()
#actually analyze the expression data
dge=merge(refFlat,dge,by="GENE")
dge_long=melt(dge,id.vars=c("GENE","transcript","chrom","strand","start","end"),value.name="count",variable.name="cell_barcode")
dge_long[,species:=sub("_.*","",chrom),]
dge_long_uniq=unique(dge_long[,-grep("transcript|chrom|strand|start|end",names(dge_long)),with=FALSE])
dge_long_mean=dge_long_uniq[,list(g1=sum(count>=1),g5=sum(count>=5),g10=sum(count>=10),mean=mean(count[count>0])),by=c("cell_barcode","species")]
dge_long_mean[,diff_mh_g1:=g1[species=="MOUSE"]-g1[species=="HUMAN"],by="cell_barcode"]
dge_long_mean[,ratio_mh_g1:=g1[species=="MOUSE"]/g1[species=="HUMAN"],by="cell_barcode"]
dge_long_mean[,percent_g1:=g1/sum(g1)*100,by="cell_barcode"]
dge_long_mean[,total_g1:=sum(g1),by="cell_barcode"]
dge_long_mean[,species_dom:=ifelse(diff_mh_g1>0,"MOUSE",ifelse(diff_mh_g1<0,"HUMAN","tie")),]
dge_wide_mean=reshape(dge_long_mean,idvar="cell_barcode",timevar="species",direction="wide")
dge_wide_mean[,doublet:=ifelse(percent_g1.MOUSE>10&percent_g1.MOUSE<90,TRUE,FALSE),]
double_frac=(nrow(dge_wide_mean[percent_g1.MOUSE>10&percent_g1.MOUSE<90])*2)/nrow(dge_wide_mean)
#ratio plots
dge_long_mean[,cell_barcode:=factor(cell_barcode,levels=unique(cell_barcode[order(ratio_mh_g1)])),]
svg(paste0(out_dir,"/species_ratio_g1.svg"),height=7,width=5)
ggplot(dge_long_mean[percent_g1!=0], aes(x=cell_barcode,y=percent_g1,fill=species,alpha=log10(total_g1)))+geom_bar(position="stack",stat="identity",col="transparent")+ggtitle(paste0("doublet-estimate: ",round(double_frac,3)*100,"%"))+theme(axis.text.y = element_blank(),panel.grid.major = element_blank(), panel.grid.minor = element_blank())+coord_flip()+xlab("Cells")+ylab("% of total detected genes")
dev.off()
#mouse vs. human
pdf(paste0(out_dir,"/species_cor_g1.svg"),height=6,width=5)
ggplot(dge_wide_mean, aes(x=log10(g1.MOUSE),y=log10(g1.HUMAN),fill=species_dom.MOUSE,col=doublet))+geom_abline(slope=1)+geom_point(shape=21,alpha=0.4,size=2)+theme(legend.position="bottom")+ggtitle(paste0("doublet-estimate: ",round(double_frac,3)*100,"%"))+xlim(c(0,4))+ylim(c(0,4))+scale_color_manual(values=c("TRUE"="black","FALSE"="grey"))
dev.off()
duplUMIs=umiPerGene[Num_Obs>1,.N,by="Cell Barcode"]
duplUMIs[,N_topped:=ifelse(N>1000,1000,N),]
duplScore=nrow(umiPerGene[Num_Obs>1])/nrow(umiPerGene)
pdf(paste0(out_dir,"/duplUMIs_per_cell_hist.pdf"),height=6,width=6)
ggplot(duplUMIs,aes(x=log10(N)))+geom_histogram(bins=40,col="black",fill="grey",size=0.2)+xlab("Number of duplicate UMIs (log10)")+ylab("Number of cells")+ggtitle(paste0("Duplication rate: ",round(duplScore,3)))
dev.off()
#plot percentage of duplicate UMIs per cell
percent_dup=umiPerGene[,.N,by=c("Num_Obs","Cell Barcode")][,list(percent_dupl=sum(N[Num_Obs>1]/sum(N)*100)),by="Cell Barcode"]
pdf(paste0(out_dir,"/duplUMIs_percent_cell_hist.svg"),height=6,width=6)
ggplot(percent_dup,aes(x=percent_dupl))+geom_histogram(bins=50,col="black",fill="grey",size=0.2)+xlab("Percent duplicate UMIs")+ylab("Number of cells")+ggtitle(paste0("Duplication rate: ",round(duplScore,3)))
dev.off()
#actually analyze the expression data
dge=merge(refFlat,dge,by="GENE")
dge_long=melt(dge,id.vars=c("GENE","transcript","chrom","strand","start","end"),value.name="count",variable.name="cell_barcode")
dge_long[,species:=sub("_.*","",chrom),]
dge_long_uniq=unique(dge_long[,-grep("transcript|chrom|strand|start|end",names(dge_long)),with=FALSE])
library(data.table)
library(ggplot2)
library(reshape2)
theme_set(theme_bw())
data_dir="/scratch/lab_bock/shared/projects/crop-seq/results_pipeline/Drop-seq_HEK293T-3T3/"
out_dir="/scratch/lab_bock/shared/projects/crop-seq/mixing_hum_mouse"
dir.create(out_dir)
refFlat=fread("/data/groups/lab_bock/shared/resources/genomes/hg19_mm10_transgenes/hg19_mm10_transgenes.refFlat",drop=c(7:11))
setnames(refFlat,names(refFlat),c("GENE","transcript","chrom","strand","start","end"))
refFlat=refFlat[!grepl("ERCC",chrom),]
umiPerGene=fread(file.path(data_dir,"cell_umi_barcodes.500genes.tsv"))
dge=fread(file.path(data_dir,"digital_expression.500genes.tsv"))
#plot number of duplicate UMIs per cell
duplUMIs=umiPerGene[Num_Obs>1,.N,by="Cell Barcode"]
duplUMIs[,N_topped:=ifelse(N>1000,1000,N),]
duplScore=nrow(umiPerGene[Num_Obs>1])/nrow(umiPerGene)
pdf(paste0(out_dir,"/duplUMIs_per_cell_hist.pdf"),height=6,width=6)
ggplot(duplUMIs,aes(x=log10(N)))+geom_histogram(bins=40,col="black",fill="grey",size=0.2)+xlab("Number of duplicate UMIs (log10)")+ylab("Number of cells")+ggtitle(paste0("Duplication rate: ",round(duplScore,3)))
dev.off()
#plot percentage of duplicate UMIs per cell
percent_dup=umiPerGene[,.N,by=c("Num_Obs","Cell Barcode")][,list(percent_dupl=sum(N[Num_Obs>1]/sum(N)*100)),by="Cell Barcode"]
pdf(paste0(out_dir,"/duplUMIs_percent_cell_hist.svg"),height=6,width=6)
ggplot(percent_dup,aes(x=percent_dupl))+geom_histogram(bins=50,col="black",fill="grey",size=0.2)+xlab("Percent duplicate UMIs")+ylab("Number of cells")+ggtitle(paste0("Duplication rate: ",round(duplScore,3)))
dev.off()
#actually analyze the expression data
dge=merge(refFlat,dge,by="GENE")
dge_long=melt(dge,id.vars=c("GENE","transcript","chrom","strand","start","end"),value.name="count",variable.name="cell_barcode")
dge_long[,species:=sub("_.*","",chrom),]
dge_long_uniq=unique(dge_long[,-grep("transcript|chrom|strand|start|end",names(dge_long)),with=FALSE])
dge_long_mean=dge_long_uniq[,list(g1=sum(count>=1),g5=sum(count>=5),g10=sum(count>=10),mean=mean(count[count>0])),by=c("cell_barcode","species")]
dge_long_mean[,diff_mh_g1:=g1[species=="MOUSE"]-g1[species=="HUMAN"],by="cell_barcode"]
dge_long_mean[,ratio_mh_g1:=g1[species=="MOUSE"]/g1[species=="HUMAN"],by="cell_barcode"]
dge_long_mean[,percent_g1:=g1/sum(g1)*100,by="cell_barcode"]
dge_long_mean[,total_g1:=sum(g1),by="cell_barcode"]
dge_long_mean[,species_dom:=ifelse(diff_mh_g1>0,"MOUSE",ifelse(diff_mh_g1<0,"HUMAN","tie")),]
dge_wide_mean=reshape(dge_long_mean,idvar="cell_barcode",timevar="species",direction="wide")
dge_wide_mean[,doublet:=ifelse(percent_g1.MOUSE>10&percent_g1.MOUSE<90,TRUE,FALSE),]
double_frac=(nrow(dge_wide_mean[percent_g1.MOUSE>10&percent_g1.MOUSE<90])*2)/nrow(dge_wide_mean)
#ratio plots
dge_long_mean[,cell_barcode:=factor(cell_barcode,levels=unique(cell_barcode[order(ratio_mh_g1)])),]
svg(paste0(out_dir,"/species_ratio_g1.pdf"),height=7,width=5)
ggplot(dge_long_mean[percent_g1!=0], aes(x=cell_barcode,y=percent_g1,fill=species,alpha=log10(total_g1)))+geom_bar(position="stack",stat="identity",col="transparent")+ggtitle(paste0("doublet-estimate: ",round(double_frac,3)*100,"%"))+theme(axis.text.y = element_blank(),panel.grid.major = element_blank(), panel.grid.minor = element_blank())+coord_flip()+xlab("Cells")+ylab("% of total detected genes")
dev.off()
#mouse vs. human
pdf(paste0(out_dir,"/species_cor_g1.pdf"),height=6,width=5)
ggplot(dge_wide_mean, aes(x=log10(g1.MOUSE),y=log10(g1.HUMAN),fill=species_dom.MOUSE,col=doublet))+geom_abline(slope=1)+geom_point(shape=21,alpha=0.4,size=2)+theme(legend.position="bottom")+ggtitle(paste0("doublet-estimate: ",round(double_frac,3)*100,"%"))+xlim(c(0,4))+ylim(c(0,4))+scale_color_manual(values=c("TRUE"="black","FALSE"="grey"))
dev.off()
dge_long_mean[,cell_barcode:=factor(cell_barcode,levels=unique(cell_barcode[order(ratio_mh_g1)])),]
pdf(paste0(out_dir,"/species_ratio_g1.pdf"),height=7,width=5)
ggplot(dge_long_mean[percent_g1!=0], aes(x=cell_barcode,y=percent_g1,fill=species,alpha=log10(total_g1)))+geom_bar(position="stack",stat="identity",col="transparent")+ggtitle(paste0("doublet-estimate: ",round(double_frac,3)*100,"%"))+theme(axis.text.y = element_blank(),panel.grid.major = element_blank(), panel.grid.minor = element_blank())+coord_flip()+xlab("Cells")+ylab("% of total detected genes")
dev.off()
percent_dup=umiPerGene[,.N,by=c("Num_Obs","Cell Barcode")][,list(percent_dupl=sum(N[Num_Obs>1]/sum(N)*100)),by="Cell Barcode"]
pdf(paste0(out_dir,"/duplUMIs_percent_cell_hist.pdf"),height=6,width=6)
ggplot(percent_dup,aes(x=percent_dupl))+geom_histogram(bins=50,col="black",fill="grey",size=0.2)+xlab("Percent duplicate UMIs")+ylab("Number of cells")+ggtitle(paste0("Duplication rate: ",round(duplScore,3)))
dev.off()
library(data.table)
genomes=fread("/data/groups/lab_bock/jklughammer/gitRepos/Thesis/meta/genomes_overview_ncbi20161013.txt")
genomes
genomes=fread("/data/groups/lab_bock/jklughammer/gitRepos/Thesis/meta/genomes_overview_ncbi20161013.txt")
genomes
library(ggplot2)
ggplot(genomes,aes(x=`Size (Mb)`,y=Kingdom,fill=Kingdom))+geom_point(alpha=0.4,shape=21)
ggplot(genomes,aes(x=log10(`Size (Mb)`),y=Kingdom,fill=Kingdom))+geom_point(alpha=0.4,shape=21)
theme_set(theme_bw())
ggplot(genomes,aes(x=log10(`Size (Mb)`),y=Kingdom,fill=Kingdom))+geom_point(position=position_jitter(),alpha=0.4,shape=21)
ggplot(genomes,aes(x=log10(`Size (Mb)`),y=Kingdom,fill=Kingdom))+geom_point(position=position_jitter(),alpha=0.4,shape=21,col="transparent")
ggplot(genomes,aes(x=log10(`Size (Mb)`),y=Kingdom,fill=Kingdom,col=Kingdom))+geom_point(position=position_jitter(),alpha=0.4,shape=21)
ggplot(genomes,aes(x=log10(`Size (Mb)`),y=Kingdom,fill=Kingdom,col=Kingdom))+geom_point(position=position_jitter(),alpha=0.1,shape=21)
genomes[,.N,by="Group"]
genomes[,.N,by=c("Group","Kingdom")]
genomes[,tax_group:=Kingdom,]
genomes=fread("/data/groups/lab_bock/jklughammer/gitRepos/Thesis/meta/genomes_overview_ncbi20161013.txt")
genomes[,tax_group:=ifelse(Kingdom=="Eukaryota",Group,Kingdom),]
ggplot(genomes,aes(x=log10(`Size (Mb)`),y=tax_group,fill=tax_group,col=tax_group))+geom_point(position=position_jitter(),alpha=0.1,shape=21)
genomes[tax_group=="Other"]
ggplot(genomes[tax_group!="Other"],aes(x=log10(`Size (Mb)`),y=tax_group,fill=tax_group,col=tax_group))+geom_point(position=position_jitter(),alpha=0.1,shape=21)
ggplot(genomes[!tax_group%in%c("Other","Viroids")],aes(x=log10(`Size (Mb)`),y=tax_group,fill=tax_group,col=tax_group))+geom_point(position=position_jitter(),alpha=0.1,shape=21)
ggplot(genomes[!tax_group%in%c("Other","Viroids")],aes(x=log10(`Size (Mb)`),y=tax_group,fill=tax_group,col=tax_group))+geom_point(position=position_jitter(),alpha=0.1,shape=21)+geom_boxplot()
ggplot(genomes[!tax_group%in%c("Other","Viroids")],aes(y=log10(`Size (Mb)`),x=tax_group,fill=tax_group,col=tax_group))+geom_point(position=position_jitter(),alpha=0.1,shape=21)+geom_boxplot()
ggplot(genomes[!tax_group%in%c("Other","Viroids")],aes(y=log10(`Size (Mb)`),x=tax_group,fill=tax_group,col=tax_group))+geom_point(position=position_jitter(),alpha=0.1,shape=21)+geom_boxplot(col="black",fill="transparent")
ggplot(genomes[!tax_group%in%c("Other","Viroids")],aes(y=log10(`Size (Mb)`),x=tax_group,fill=tax_group,col=tax_group))+geom_point(position=position_jitter(),alpha=0.1,shape=21)+geom_boxplot(col="black",fill="transparent",outlier.colour=NULL)
ggplot(genomes[!tax_group%in%c("Other","Viroids")],aes(y=log10(`Size (Mb)`),x=tax_group,fill=tax_group,col=tax_group))+geom_point(position=position_jitter(),alpha=0.1,shape=21)+geom_boxplot(col="black",fill="transparent",outlier.colour=NA)
genomes[,tax_group=factor(tax_group,levels=unique(tax_group[order(Kingdom)])),]
genomes[,tax_group:=factor(tax_group,levels=unique(tax_group[order(Kingdom)])),]
ggplot(genomes[!tax_group%in%c("Other","Viroids")],aes(y=log10(`Size (Mb)`),x=tax_group,fill=tax_group,col=tax_group))+geom_point(position=position_jitter(),alpha=0.1,shape=21)+geom_boxplot(col="black",fill="transparent",outlier.colour=NA)
genomes[,tax_group:=factor(tax_group,levels=c("Viruses","Archea","Bacteria","Fungi","Protists","Animals","Plants"))),]
genomes[,tax_group:=factor(tax_group,levels=c("Viruses","Archea","Bacteria","Fungi","Protists","Animals","Plants")),]
ggplot(genomes[!tax_group%in%c("Other","Viroids")],aes(y=log10(`Size (Mb)`),x=tax_group,fill=tax_group,col=tax_group))+geom_point(position=position_jitter(),alpha=0.1,shape=21)+geom_boxplot(col="black",fill="transparent",outlier.colour=NA)
genomes[,tax_group:=factor(tax_group,levels=c("Viruses","Archea","Bacteria","Fungi","Protists","Animals","Plants","Other","Viroids")),]
ggplot(genomes[!tax_group%in%c("Other","Viroids")],aes(y=log10(`Size (Mb)`),x=tax_group,fill=tax_group,col=tax_group))+geom_point(position=position_jitter(),alpha=0.1,shape=21)+geom_boxplot(col="black",fill="transparent",outlier.colour=NA)
unique(genomes$tax_group)
genomes=fread("/data/groups/lab_bock/jklughammer/gitRepos/Thesis/meta/genomes_overview_ncbi20161013.txt")
genomes[,tax_group:=ifelse(Kingdom=="Eukaryota",Group,Kingdom),]
genomes[,tax_group:=factor(tax_group,levels=c("Viruses","Archea","Bacteria","Fungi","Protists","Animals","Plants","Other","Viroids")),]
ggplot(genomes[!tax_group%in%c("Other","Viroids")],aes(y=log10(`Size (Mb)`),x=tax_group,fill=tax_group,col=tax_group))+geom_point(position=position_jitter(),alpha=0.1,shape=21)+geom_boxplot(col="black",fill="transparent",outlier.colour=NA)
genomes=fread("/data/groups/lab_bock/jklughammer/gitRepos/Thesis/meta/genomes_overview_ncbi20161013.txt")
genomes[,tax_group:=ifelse(Kingdom=="Eukaryota",Group,Kingdom),]
genomes[,tax_group:=factor(tax_group,levels=c("Viruses","Archaea","Bacteria","Fungi","Protists","Animals","Plants","Other","Viroids")),]
ggplot(genomes[!tax_group%in%c("Other","Viroids")],aes(y=log10(`Size (Mb)`),x=tax_group,fill=tax_group,col=tax_group))+geom_point(position=position_jitter(),alpha=0.1,shape=21)+geom_boxplot(col="black",fill="transparent",outlier.colour=NA)
genomes
ggplot(genomes[!tax_group%in%c("Other","Viroids")],aes(y=log10(`Size (Mb)`),x=Kingdom,fill=Kingdom,col=Kingdom))+geom_point(position=position_jitter(),alpha=0.1,shape=21)+geom_boxplot(col="black",fill="transparent",outlier.colour=NA)
ggplot(genomes[!tax_group%in%c("Other","Viroids")],aes(y=log10(`Size (Mb)`),x=tax_group,fill=Kingdom,col=Kingdom))+geom_point(position=position_jitter(),alpha=0.1,shape=21)+geom_boxplot(col="black",fill="transparent",outlier.colour=NA)
ggplot(genomes[!tax_group%in%c("Other","Viroids")],aes(y=log10(`Size (Mb)`),x=tax_group,fill=Kingdom,col=Kingdom))+geom_point(position=position_jitter(),alpha=0.1,shape=21)+geom_boxplot(col="black",fill="transparent",outlier.colour=NA)+scale_colour_manual(values=c("grey","red","yellow","blue"))
ggplot(genomes[!tax_group%in%c("Other","Viroids")],aes(y=log10(`Size (Mb)`),x=tax_group,fill=Kingdom,col=Kingdom))+geom_point(position=position_jitter(),alpha=0.1,shape=21)+geom_boxplot(col="black",fill="transparent",outlier.colour=NA)+scale_colour_manual(values=c("grey","red","yellow","blue"))+scale_fill_manual(values=c("grey","red","yellow","blue"))
ggplot(genomes[!tax_group%in%c("Other","Viroids")],aes(y=log10(`Size (Mb)`),x=tax_group,fill=Kingdom,col=Kingdom))+geom_point(position=position_jitter(),alpha=0.1,shape=21)+geom_boxplot(col="black",fill="transparent",outlier.colour=NA)+scale_colour_manual(values=c("Viruses"="grey","Archaea"="red","Bacteria"="yellow","Eucaryota"="blue"))+scale_fill_manual(values=c("Viruses"="grey","Archaea"="red","Bacteria"="yellow","Eucaryota"="blue"))
ggplot(genomes[!tax_group%in%c("Other","Viroids")],aes(y=log10(`Size (Mb)`),x=tax_group,fill=Kingdom,col=Kingdom))+geom_point(position=position_jitter(),alpha=0.1,shape=21)+geom_boxplot(col="black",fill="transparent",outlier.colour=NA)+scale_colour_manual(values=c("Viruses"="grey","Archaea"="red","Bacteria"="yellow","Eukaryota"="blue"))+scale_fill_manual(values=c("Viruses"="grey","Archaea"="red","Bacteria"="yellow","Eukaryota"="blue"))
ggplot(genomes[!tax_group%in%c("Other","Viroids")],aes(y=log10(`Size (Mb)`),x=tax_group,fill=Kingdom,col=Kingdom))+geom_point(position=position_jitter(),alpha=0.1,shape=21)+geom_boxplot(col="black",fill="transparent",outlier.colour=NA)+scale_colour_manual(values=c("Viruses"="grey","Archaea"="red","Bacteria"="orange","Eukaryota"="blue"))+scale_fill_manual(values=c("Viruses"="grey","Archaea"="red","Bacteria"="orange","Eukaryota"="blue"))
ggplot(genomes[!tax_group%in%c("Other","Viroids")],aes(y=log10(`Size (Mb)`),x=tax_group,fill=Kingdom,col=Kingdom))+geom_point(position=position_jitter(),alpha=0.1,shape=21)+geom_boxplot(col="black",fill="transparent",outlier.colour=NA)+scale_colour_manual(values=c("Viruses"="grey","Archaea"="firebrick","Bacteria"="orange","Eukaryota"="blue"))+scale_fill_manual(values=c("Viruses"="grey","Archaea"="firebrick","Bacteria"="orange","Eukaryota"="blue"))
ggplot(genomes[!tax_group%in%c("Other","Viroids")],aes(y=log10(`Size (Mb)`),x=tax_group,fill=Kingdom,col=Kingdom))+geom_point(position=position_jitter(),alpha=0.1,shape=21)+geom_boxplot(col="black",fill="transparent",outlier.colour=NA)+scale_colour_manual(values=c("Viruses"="grey","Archaea"="red","Bacteria"="orange","Eukaryota"="blue"))+scale_fill_manual(values=c("Viruses"="grey","Archaea"="red","Bacteria"="orange","Eukaryota"="blue"))
genomes
genomes[group=="Group"]
genomes[Group=="Animals"]
library("shiny")
setwd("/data/groups/lab_bock/jklughammer/gitRepos/otherProjects/IMED2016/world_health/")
runApp(appDir=getwd())
runApp(appDir=getwd())
ggplot(all_data[year==input$time],aes(x=log10(income.prox),y=lifeExpectancy.prox,size=population.prox,fill=region))+geom_point(shape=21)+xlab("log10(income)")+ylab("life expectancy")+scale_size_continuous(range=c(input$min,input$max))+xlim(c(1,6))+ylim(c(10,100))
runApp(appDir=getwd())
runApp(appDir=getwd())
runApp(appDir=getwd())
10^5
runApp(appDir=getwd())
runApp(appDir=getwd())
runApp(appDir=getwd())
runApp(appDir=getwd())
runApp(appDir=getwd())
runApp(appDir=getwd())
runApp(appDir=getwd())
runApp(appDir=getwd())
runApp(appDir=getwd())
?scale_x_continuous
ggplot(all_data[year==input$time],aes(x=income.prox,y=lifeExpectancy.prox,size=population.prox,fill=region))+geom_point(shape=21)+xlab("log10(income)")+ylab("life expectancy")+scale_size_continuous(range=c(input$min,input$max))+ylim(c(10,100))+scale_x_continuous(breaks=c(300,400,1000,2000,3000,4000,10000,20000,30000,40000,100000), trans="log1p", expand=c(1,1),limits=c(300,100000))
runApp(appDir=getwd())
?expand.grid
expand.grid(height = seq(60, 80, 5), weight = seq(100, 300, 50),
sex = c("Male","Female"))
expanded=expand.grid(all_data[,c("name","year"),with=FALSE])
load("nations_data.RData")
expanded=expand.grid(all_data[,c("name","year"),with=FALSE])
head(expanded)
expanded=as.data.table(expand.grid(all_data[,c("name","year"),with=FALSE]))
all_data[,income.prox:=tail(head(na.approx(c(first(na.omit(income)),income,last(na.omit(income)))),-1),-1),by=c("name","region")]
all_data[,population.prox:=tail(head(na.approx(c(first(na.omit(population)),population,last(na.omit(population)))),-1),-1),by=c("name","region")]
all_data[,lifeExpectancy.prox:=tail(head(na.approx(c(first(na.omit(lifeExpectancy)),lifeExpectancy,last(na.omit(lifeExpectancy)))),-1),-1),by=c("name","region")]
library(zoo)
all_data=merge(all_data,expanded,by=c("name","year"),all.x=TRUE,all.y=TRUE)
all_data[,income.prox:=tail(head(na.approx(c(first(na.omit(income)),income,last(na.omit(income)))),-1),-1),by=c("name","region")]
first
library(jsonlite)
library(tidyjson)   # this library
library(dplyr)
library(data.table)
library(zoo)
library(ggplot2)
all_data[,income.prox:=tail(head(na.approx(c(first(na.omit(income)),income,last(na.omit(income)))),-1),-1),by=c("name","region")]
all_data
runApp(appDir=getwd())
runApp(appDir=getwd())
